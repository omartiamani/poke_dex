// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<MobXProvider
  rootStore={
    RootStore {
      "pokedexStore": PokedexStore {
        "currentPokemon": null,
        "isLoading": true,
        "pokemonList": Array [],
        "reqError": null,
        "rootStore": [Circular],
        "saveSuccess": null,
        "searchValue": "",
      },
    }
  }
>
  <WithStyles(App)>
    <App
      classes={
        Object {
          "addForm": "App-addForm-343",
          "appBody": "App-appBody-342",
          "avatar": "App-avatar-337",
          "error": "App-error-333",
          "icon": "App-icon-334",
          "iconVariant": "App-iconVariant-335",
          "inputSearch": "App-inputSearch-341",
          "message": "App-message-336",
          "root": "App-root-331",
          "search": "App-search-339",
          "searchIcon": "App-searchIcon-340",
          "success": "App-success-332",
          "title": "App-title-338",
        }
      }
    >
      <MobXProvider
        rootStore={
          RootStore {
            "pokedexStore": PokedexStore {
              "currentPokemon": null,
              "isLoading": true,
              "pokemonList": Array [],
              "reqError": null,
              "rootStore": [Circular],
              "saveSuccess": null,
              "searchValue": "",
            },
          }
        }
      >
        <WithStyles(ForwardRef(Snackbar))
          anchorOrigin={
            Object {
              "horizontal": "left",
              "vertical": "bottom",
            }
          }
          autoHideDuration={6000}
          onClose={[Function]}
          open={null}
        >
          <ForwardRef(Snackbar)
            anchorOrigin={
              Object {
                "horizontal": "left",
                "vertical": "bottom",
              }
            }
            autoHideDuration={6000}
            classes={
              Object {
                "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
                "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
                "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
                "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
                "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
                "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
                "root": "MuiSnackbar-root",
              }
            }
            onClose={[Function]}
            open={null}
          />
        </WithStyles(ForwardRef(Snackbar))>
        <WithStyles(ForwardRef(AppBar))
          position="sticky"
        >
          <ForwardRef(AppBar)
            classes={
              Object {
                "colorDefault": "MuiAppBar-colorDefault",
                "colorPrimary": "MuiAppBar-colorPrimary",
                "colorSecondary": "MuiAppBar-colorSecondary",
                "positionAbsolute": "MuiAppBar-positionAbsolute",
                "positionFixed": "MuiAppBar-positionFixed",
                "positionRelative": "MuiAppBar-positionRelative",
                "positionStatic": "MuiAppBar-positionStatic",
                "positionSticky": "MuiAppBar-positionSticky",
                "root": "MuiAppBar-root",
              }
            }
            position="sticky"
          >
            <WithStyles(ForwardRef(Paper))
              className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
              component="header"
              elevation={4}
              square={true}
            >
              <ForwardRef(Paper)
                className="MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                classes={
                  Object {
                    "elevation0": "MuiPaper-elevation0",
                    "elevation1": "MuiPaper-elevation1",
                    "elevation10": "MuiPaper-elevation10",
                    "elevation11": "MuiPaper-elevation11",
                    "elevation12": "MuiPaper-elevation12",
                    "elevation13": "MuiPaper-elevation13",
                    "elevation14": "MuiPaper-elevation14",
                    "elevation15": "MuiPaper-elevation15",
                    "elevation16": "MuiPaper-elevation16",
                    "elevation17": "MuiPaper-elevation17",
                    "elevation18": "MuiPaper-elevation18",
                    "elevation19": "MuiPaper-elevation19",
                    "elevation2": "MuiPaper-elevation2",
                    "elevation20": "MuiPaper-elevation20",
                    "elevation21": "MuiPaper-elevation21",
                    "elevation22": "MuiPaper-elevation22",
                    "elevation23": "MuiPaper-elevation23",
                    "elevation24": "MuiPaper-elevation24",
                    "elevation3": "MuiPaper-elevation3",
                    "elevation4": "MuiPaper-elevation4",
                    "elevation5": "MuiPaper-elevation5",
                    "elevation6": "MuiPaper-elevation6",
                    "elevation7": "MuiPaper-elevation7",
                    "elevation8": "MuiPaper-elevation8",
                    "elevation9": "MuiPaper-elevation9",
                    "root": "MuiPaper-root",
                    "rounded": "MuiPaper-rounded",
                  }
                }
                component="header"
                elevation={4}
                square={true}
              >
                <header
                  className="MuiPaper-root MuiPaper-elevation4 MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary"
                >
                  <WithStyles(ForwardRef(Toolbar))>
                    <ForwardRef(Toolbar)
                      classes={
                        Object {
                          "dense": "MuiToolbar-dense",
                          "gutters": "MuiToolbar-gutters",
                          "regular": "MuiToolbar-regular",
                          "root": "MuiToolbar-root",
                        }
                      }
                    >
                      <div
                        className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                      >
                        <WithStyles(ForwardRef(Avatar))
                          alt="Remy Sharp"
                          className="App-avatar-337"
                          src="https://storage.cloud.google.com/poke-app/pokeball.jpg"
                        >
                          <ForwardRef(Avatar)
                            alt="Remy Sharp"
                            className="App-avatar-337"
                            classes={
                              Object {
                                "colorDefault": "MuiAvatar-colorDefault",
                                "img": "MuiAvatar-img",
                                "root": "MuiAvatar-root",
                              }
                            }
                            src="https://storage.cloud.google.com/poke-app/pokeball.jpg"
                          >
                            <div
                              className="MuiAvatar-root App-avatar-337"
                            >
                              <img
                                alt="Remy Sharp"
                                className="MuiAvatar-img"
                                src="https://storage.cloud.google.com/poke-app/pokeball.jpg"
                              />
                            </div>
                          </ForwardRef(Avatar)>
                        </WithStyles(ForwardRef(Avatar))>
                        <WithStyles(ForwardRef(Typography))
                          className="App-title-338"
                          noWrap={true}
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            className="App-title-338"
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            noWrap={true}
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root App-title-338 MuiTypography-h6 MuiTypography-noWrap"
                            >
                              Poke App
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <div
                          className="App-search-339"
                        >
                          <div
                            className="App-searchIcon-340"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden="true"
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    role="presentation"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                          </div>
                          <WithStyles(ForwardRef(InputBase))
                            classes={
                              Object {
                                "input": "App-inputSearch-341",
                                "root": undefined,
                              }
                            }
                            inputProps={
                              Object {
                                "aria-label": "search",
                              }
                            }
                            onChange={[Function]}
                            placeholder="Search…"
                            value=""
                          >
                            <ForwardRef(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInputBase-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth",
                                  "input": "MuiInputBase-input App-inputSearch-341",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline",
                                  "inputSelect": "MuiInputBase-inputSelect",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline",
                                  "root": "MuiInputBase-root",
                                }
                              }
                              inputProps={
                                Object {
                                  "aria-label": "search",
                                }
                              }
                              onChange={[Function]}
                              placeholder="Search…"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root"
                                onClick={[Function]}
                              >
                                <input
                                  aria-label="search"
                                  className="MuiInputBase-input App-inputSearch-341"
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  placeholder="Search…"
                                  type="text"
                                  value=""
                                />
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </div>
                      </div>
                    </ForwardRef(Toolbar)>
                  </WithStyles(ForwardRef(Toolbar))>
                </header>
              </ForwardRef(Paper)>
            </WithStyles(ForwardRef(Paper))>
          </ForwardRef(AppBar)>
        </WithStyles(ForwardRef(AppBar))>
        <div
          className="App-appBody-342"
        >
          <WithStyles(inject-with-rootStore(AddForm))
            className="App-addForm-343"
          >
            <inject-with-rootStore(AddForm)
              className="App-addForm-343"
              classes={
                Object {
                  "addButton": "inject-with-rootStore(AddForm)-addButton-456",
                  "descriptionTextField": "inject-with-rootStore(AddForm)-descriptionTextField-455",
                  "nameTextField": "inject-with-rootStore(AddForm)-nameTextField-453",
                  "typeTextField": "inject-with-rootStore(AddForm)-typeTextField-454",
                }
              }
            >
              <AddForm
                className="App-addForm-343"
                classes={
                  Object {
                    "addButton": "inject-with-rootStore(AddForm)-addButton-456",
                    "descriptionTextField": "inject-with-rootStore(AddForm)-descriptionTextField-455",
                    "nameTextField": "inject-with-rootStore(AddForm)-nameTextField-453",
                    "typeTextField": "inject-with-rootStore(AddForm)-typeTextField-454",
                  }
                }
                rootStore={
                  RootStore {
                    "pokedexStore": PokedexStore {
                      "currentPokemon": null,
                      "isLoading": true,
                      "pokemonList": Array [],
                      "reqError": null,
                      "rootStore": [Circular],
                      "saveSuccess": null,
                      "searchValue": "",
                    },
                  }
                }
              >
                <div
                  className="App-addForm-343"
                >
                  <WithStyles(ForwardRef(TextField))
                    className="inject-with-rootStore(AddForm)-nameTextField-453"
                    label="Nom du Pokémon"
                    onChange={[Function]}
                    value=""
                    variant="outlined"
                  >
                    <ForwardRef(TextField)
                      className="inject-with-rootStore(AddForm)-nameTextField-453"
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      label="Nom du Pokémon"
                      onChange={[Function]}
                      value=""
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root inject-with-rootStore(AddForm)-nameTextField-453"
                        required={false}
                        variant="outlined"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root inject-with-rootStore(AddForm)-nameTextField-453"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          required={false}
                          variant="outlined"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root inject-with-rootStore(AddForm)-nameTextField-453"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      data-shrink={false}
                                    >
                                      Nom du Pokémon
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(OutlinedInput))
                              labelWidth={0}
                              onChange={[Function]}
                              value=""
                            >
                              <ForwardRef(OutlinedInput)
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "inputSelect": "MuiOutlinedInput-inputSelect",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                labelWidth={0}
                                onChange={[Function]}
                                value=""
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "inputSelect": "MuiOutlinedInput-inputSelect",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": null,
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent="input"
                                  multiline={false}
                                  onChange={[Function]}
                                  renderSuffix={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <ForwardRef(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth",
                                        "input": "MuiInputBase-input MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                        "root": "MuiInputBase-root MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent="input"
                                    multiline={false}
                                    onChange={[Function]}
                                    renderSuffix={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <div
                                      className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                                      onClick={[Function]}
                                    >
                                      <input
                                        aria-invalid={false}
                                        className="MuiInputBase-input MuiOutlinedInput-input"
                                        disabled={false}
                                        onAnimationStart={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        type="text"
                                        value=""
                                      />
                                      <WithStyles(ForwardRef(NotchedOutline))
                                        className="MuiOutlinedInput-notchedOutline"
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <ForwardRef(NotchedOutline)
                                          className="MuiOutlinedInput-notchedOutline"
                                          classes={
                                            Object {
                                              "legend": "PrivateNotchedOutline-legend-497",
                                              "root": "PrivateNotchedOutline-root-496",
                                            }
                                          }
                                          labelWidth={0}
                                          notched={false}
                                        >
                                          <fieldset
                                            aria-hidden={true}
                                            className="PrivateNotchedOutline-root-496 MuiOutlinedInput-notchedOutline"
                                            style={
                                              Object {
                                                "paddingLeft": 8,
                                              }
                                            }
                                          >
                                            <legend
                                              className="PrivateNotchedOutline-legend-497"
                                              style={
                                                Object {
                                                  "width": 0.01,
                                                }
                                              }
                                            >
                                              <span
                                                dangerouslySetInnerHTML={
                                                  Object {
                                                    "__html": "&#8203;",
                                                  }
                                                }
                                              />
                                            </legend>
                                          </fieldset>
                                        </ForwardRef(NotchedOutline)>
                                      </WithStyles(ForwardRef(NotchedOutline))>
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(OutlinedInput)>
                            </WithStyles(ForwardRef(OutlinedInput))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                  <WithStyles(ForwardRef(TextField))
                    className="inject-with-rootStore(AddForm)-typeTextField-454"
                    label="Type"
                    onChange={[Function]}
                    select={true}
                    value=""
                    variant="outlined"
                  >
                    <ForwardRef(TextField)
                      className="inject-with-rootStore(AddForm)-typeTextField-454"
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      label="Type"
                      onChange={[Function]}
                      select={true}
                      value=""
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root inject-with-rootStore(AddForm)-typeTextField-454"
                        required={false}
                        variant="outlined"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root inject-with-rootStore(AddForm)-typeTextField-454"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          required={false}
                          variant="outlined"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root inject-with-rootStore(AddForm)-typeTextField-454"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      data-shrink={false}
                                    >
                                      Type
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(Select))
                              input={
                                <ForwardRef(WithStyles)
                                  labelWidth={0}
                                  onChange={[Function]}
                                  value=""
                                />
                              }
                              value=""
                            >
                              <ForwardRef(Select)
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  }
                                }
                                input={
                                  <ForwardRef(WithStyles)
                                    labelWidth={0}
                                    onChange={[Function]}
                                    value=""
                                  />
                                }
                                value=""
                              >
                                <WithStyles(ForwardRef(OutlinedInput))
                                  inputComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "IconComponent": [Function],
                                        "MenuProps": [Function],
                                        "SelectDisplayProps": [Function],
                                        "autoFocus": [Function],
                                        "autoWidth": [Function],
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "disabled": [Function],
                                        "displayEmpty": [Function],
                                        "inputRef": [Function],
                                        "multiple": [Function],
                                        "name": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onClose": [Function],
                                        "onFocus": [Function],
                                        "onOpen": [Function],
                                        "open": [Function],
                                        "readOnly": [Function],
                                        "renderValue": [Function],
                                        "required": [Function],
                                        "tabIndex": [Function],
                                        "type": [Function],
                                        "value": [Function],
                                        "variant": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  inputProps={
                                    Object {
                                      "IconComponent": Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "displayName": "ArrowDropDownIcon",
                                        "muiName": "SvgIcon",
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      },
                                      "MenuProps": undefined,
                                      "SelectDisplayProps": undefined,
                                      "autoWidth": false,
                                      "children": Array [
                                        <ForwardRef(WithStyles)
                                          value="feu"
                                        >
                                          Feu
                                        </ForwardRef(WithStyles)>,
                                        <ForwardRef(WithStyles)
                                          value="eau"
                                        >
                                          Eau
                                        </ForwardRef(WithStyles)>,
                                        <ForwardRef(WithStyles)
                                          value="foudre"
                                        >
                                          Foudre
                                        </ForwardRef(WithStyles)>,
                                        <ForwardRef(WithStyles)
                                          value="plante"
                                        >
                                          Plante
                                        </ForwardRef(WithStyles)>,
                                      ],
                                      "classes": Object {
                                        "disabled": "Mui-disabled",
                                        "filled": "MuiSelect-filled",
                                        "icon": "MuiSelect-icon",
                                        "iconFilled": "MuiSelect-iconFilled",
                                        "iconOutlined": "MuiSelect-iconOutlined",
                                        "outlined": "MuiSelect-outlined",
                                        "root": "MuiSelect-root",
                                        "select": "MuiSelect-select",
                                        "selectMenu": "MuiSelect-selectMenu",
                                      },
                                      "displayEmpty": false,
                                      "multiple": false,
                                      "onClose": undefined,
                                      "onOpen": undefined,
                                      "open": undefined,
                                      "renderValue": undefined,
                                      "type": undefined,
                                      "variant": "outlined",
                                    }
                                  }
                                  labelWidth={0}
                                  onChange={[Function]}
                                  select={true}
                                  value=""
                                >
                                  <ForwardRef(OutlinedInput)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiOutlinedInput-inputSelect",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    inputComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "IconComponent": [Function],
                                          "MenuProps": [Function],
                                          "SelectDisplayProps": [Function],
                                          "autoFocus": [Function],
                                          "autoWidth": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "disabled": [Function],
                                          "displayEmpty": [Function],
                                          "inputRef": [Function],
                                          "multiple": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onClose": [Function],
                                          "onFocus": [Function],
                                          "onOpen": [Function],
                                          "open": [Function],
                                          "readOnly": [Function],
                                          "renderValue": [Function],
                                          "required": [Function],
                                          "tabIndex": [Function],
                                          "type": [Function],
                                          "value": [Function],
                                          "variant": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    inputProps={
                                      Object {
                                        "IconComponent": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "displayName": "ArrowDropDownIcon",
                                          "muiName": "SvgIcon",
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": undefined,
                                        "autoWidth": false,
                                        "children": Array [
                                          <ForwardRef(WithStyles)
                                            value="feu"
                                          >
                                            Feu
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="eau"
                                          >
                                            Eau
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="foudre"
                                          >
                                            Foudre
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="plante"
                                          >
                                            Plante
                                          </ForwardRef(WithStyles)>,
                                        ],
                                        "classes": Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        },
                                        "displayEmpty": false,
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "outlined",
                                      }
                                    }
                                    labelWidth={0}
                                    onChange={[Function]}
                                    select={true}
                                    value=""
                                  >
                                    <WithStyles(ForwardRef(InputBase))
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "inputSelect": "MuiOutlinedInput-inputSelect",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": null,
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={false}
                                      inputComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "IconComponent": [Function],
                                            "MenuProps": [Function],
                                            "SelectDisplayProps": [Function],
                                            "autoFocus": [Function],
                                            "autoWidth": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "disabled": [Function],
                                            "displayEmpty": [Function],
                                            "inputRef": [Function],
                                            "multiple": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onClose": [Function],
                                            "onFocus": [Function],
                                            "onOpen": [Function],
                                            "open": [Function],
                                            "readOnly": [Function],
                                            "renderValue": [Function],
                                            "required": [Function],
                                            "tabIndex": [Function],
                                            "type": [Function],
                                            "value": [Function],
                                            "variant": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      inputProps={
                                        Object {
                                          "IconComponent": Object {
                                            "$$typeof": Symbol(react.memo),
                                            "compare": null,
                                            "displayName": "ArrowDropDownIcon",
                                            "muiName": "SvgIcon",
                                            "type": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                          },
                                          "MenuProps": undefined,
                                          "SelectDisplayProps": undefined,
                                          "autoWidth": false,
                                          "children": Array [
                                            <ForwardRef(WithStyles)
                                              value="feu"
                                            >
                                              Feu
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="eau"
                                            >
                                              Eau
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="foudre"
                                            >
                                              Foudre
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="plante"
                                            >
                                              Plante
                                            </ForwardRef(WithStyles)>,
                                          ],
                                          "classes": Object {
                                            "disabled": "Mui-disabled",
                                            "filled": "MuiSelect-filled",
                                            "icon": "MuiSelect-icon",
                                            "iconFilled": "MuiSelect-iconFilled",
                                            "iconOutlined": "MuiSelect-iconOutlined",
                                            "outlined": "MuiSelect-outlined",
                                            "root": "MuiSelect-root",
                                            "select": "MuiSelect-select",
                                            "selectMenu": "MuiSelect-selectMenu",
                                          },
                                          "displayEmpty": false,
                                          "multiple": false,
                                          "onClose": undefined,
                                          "onOpen": undefined,
                                          "open": undefined,
                                          "renderValue": undefined,
                                          "type": undefined,
                                          "variant": "outlined",
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      renderSuffix={[Function]}
                                      select={true}
                                      type="text"
                                      value=""
                                    >
                                      <ForwardRef(InputBase)
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "focused": "Mui-focused Mui-focused",
                                            "formControl": "MuiInputBase-formControl",
                                            "fullWidth": "MuiInputBase-fullWidth",
                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                            "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={false}
                                        inputComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "propTypes": Object {
                                              "IconComponent": [Function],
                                              "MenuProps": [Function],
                                              "SelectDisplayProps": [Function],
                                              "autoFocus": [Function],
                                              "autoWidth": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classes": [Function],
                                              "disabled": [Function],
                                              "displayEmpty": [Function],
                                              "inputRef": [Function],
                                              "multiple": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onClose": [Function],
                                              "onFocus": [Function],
                                              "onOpen": [Function],
                                              "open": [Function],
                                              "readOnly": [Function],
                                              "renderValue": [Function],
                                              "required": [Function],
                                              "tabIndex": [Function],
                                              "type": [Function],
                                              "value": [Function],
                                              "variant": [Function],
                                            },
                                            "render": [Function],
                                          }
                                        }
                                        inputProps={
                                          Object {
                                            "IconComponent": Object {
                                              "$$typeof": Symbol(react.memo),
                                              "compare": null,
                                              "displayName": "ArrowDropDownIcon",
                                              "muiName": "SvgIcon",
                                              "type": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "render": [Function],
                                              },
                                            },
                                            "MenuProps": undefined,
                                            "SelectDisplayProps": undefined,
                                            "autoWidth": false,
                                            "children": Array [
                                              <ForwardRef(WithStyles)
                                                value="feu"
                                              >
                                                Feu
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="eau"
                                              >
                                                Eau
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="foudre"
                                              >
                                                Foudre
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="plante"
                                              >
                                                Plante
                                              </ForwardRef(WithStyles)>,
                                            ],
                                            "classes": Object {
                                              "disabled": "Mui-disabled",
                                              "filled": "MuiSelect-filled",
                                              "icon": "MuiSelect-icon",
                                              "iconFilled": "MuiSelect-iconFilled",
                                              "iconOutlined": "MuiSelect-iconOutlined",
                                              "outlined": "MuiSelect-outlined",
                                              "root": "MuiSelect-root",
                                              "select": "MuiSelect-select",
                                              "selectMenu": "MuiSelect-selectMenu",
                                            },
                                            "displayEmpty": false,
                                            "multiple": false,
                                            "onClose": undefined,
                                            "onOpen": undefined,
                                            "open": undefined,
                                            "renderValue": undefined,
                                            "type": undefined,
                                            "variant": "outlined",
                                          }
                                        }
                                        multiline={false}
                                        onChange={[Function]}
                                        renderSuffix={[Function]}
                                        select={true}
                                        type="text"
                                        value=""
                                      >
                                        <div
                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                                          onClick={[Function]}
                                        >
                                          <ForwardRef(SelectInput)
                                            IconComponent={
                                              Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "displayName": "ArrowDropDownIcon",
                                                "muiName": "SvgIcon",
                                                "type": Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "render": [Function],
                                                },
                                              }
                                            }
                                            aria-invalid={false}
                                            autoWidth={false}
                                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                            classes={
                                              Object {
                                                "disabled": "Mui-disabled",
                                                "filled": "MuiSelect-filled",
                                                "icon": "MuiSelect-icon",
                                                "iconFilled": "MuiSelect-iconFilled",
                                                "iconOutlined": "MuiSelect-iconOutlined",
                                                "outlined": "MuiSelect-outlined",
                                                "root": "MuiSelect-root",
                                                "select": "MuiSelect-select",
                                                "selectMenu": "MuiSelect-selectMenu",
                                              }
                                            }
                                            disabled={false}
                                            displayEmpty={false}
                                            inputRef={[Function]}
                                            multiple={false}
                                            onAnimationStart={[Function]}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            value=""
                                            variant="outlined"
                                          >
                                            <div
                                              aria-haspopup="listbox"
                                              className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                              tabIndex={0}
                                            >
                                              <span
                                                dangerouslySetInnerHTML={
                                                  Object {
                                                    "__html": "&#8203;",
                                                  }
                                                }
                                              />
                                            </div>
                                            <input
                                              onAnimationStart={[Function]}
                                              type="hidden"
                                              value=""
                                            />
                                            <ForwardRef
                                              className="MuiSelect-icon MuiSelect-iconOutlined"
                                            >
                                              <WithStyles(ForwardRef(SvgIcon))
                                                className="MuiSelect-icon MuiSelect-iconOutlined"
                                              >
                                                <ForwardRef(SvgIcon)
                                                  className="MuiSelect-icon MuiSelect-iconOutlined"
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                      "colorError": "MuiSvgIcon-colorError",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                      "root": "MuiSvgIcon-root",
                                                    }
                                                  }
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root MuiSelect-icon MuiSelect-iconOutlined"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 10l5 5 5-5z"
                                                    />
                                                  </svg>
                                                </ForwardRef(SvgIcon)>
                                              </WithStyles(ForwardRef(SvgIcon))>
                                            </ForwardRef>
                                            <WithStyles(ForwardRef(Menu))
                                              MenuListProps={
                                                Object {
                                                  "disableListWrap": true,
                                                  "role": "listbox",
                                                }
                                              }
                                              PaperProps={
                                                Object {
                                                  "style": Object {
                                                    "minWidth": undefined,
                                                  },
                                                }
                                              }
                                              anchorEl={
                                                <div
                                                  aria-haspopup="listbox"
                                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                                  role="button"
                                                  tabindex="0"
                                                >
                                                  <span>
                                                    ​
                                                  </span>
                                                </div>
                                              }
                                              id="menu-"
                                              onClose={[Function]}
                                              open={false}
                                            >
                                              <ForwardRef(Menu)
                                                MenuListProps={
                                                  Object {
                                                    "disableListWrap": true,
                                                    "role": "listbox",
                                                  }
                                                }
                                                PaperProps={
                                                  Object {
                                                    "style": Object {
                                                      "minWidth": undefined,
                                                    },
                                                  }
                                                }
                                                anchorEl={
                                                  <div
                                                    aria-haspopup="listbox"
                                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                                    role="button"
                                                    tabindex="0"
                                                  >
                                                    <span>
                                                      ​
                                                    </span>
                                                  </div>
                                                }
                                                classes={
                                                  Object {
                                                    "list": "MuiMenu-list",
                                                    "paper": "MuiMenu-paper",
                                                  }
                                                }
                                                id="menu-"
                                                onClose={[Function]}
                                                open={false}
                                              >
                                                <WithStyles(ForwardRef(Popover))
                                                  PaperProps={
                                                    Object {
                                                      "classes": Object {
                                                        "root": "MuiMenu-paper",
                                                      },
                                                      "style": Object {
                                                        "minWidth": undefined,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={
                                                    <div
                                                      aria-haspopup="listbox"
                                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                                      role="button"
                                                      tabindex="0"
                                                    >
                                                      <span>
                                                        ​
                                                      </span>
                                                    </div>
                                                  }
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                  getContentAnchorEl={[Function]}
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  onEntering={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                  transitionDuration="auto"
                                                >
                                                  <ForwardRef(Popover)
                                                    PaperProps={
                                                      Object {
                                                        "classes": Object {
                                                          "root": "MuiMenu-paper",
                                                        },
                                                        "style": Object {
                                                          "minWidth": undefined,
                                                        },
                                                      }
                                                    }
                                                    anchorEl={
                                                      <div
                                                        aria-haspopup="listbox"
                                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSelect MuiOutlinedInput-inputSelect"
                                                        role="button"
                                                        tabindex="0"
                                                      >
                                                        <span>
                                                          ​
                                                        </span>
                                                      </div>
                                                    }
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "paper": "MuiPopover-paper",
                                                        "root": "MuiPopover-root",
                                                      }
                                                    }
                                                    getContentAnchorEl={[Function]}
                                                    id="menu-"
                                                    onClose={[Function]}
                                                    onEntering={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <ForwardRef(Modal)
                                                      BackdropProps={
                                                        Object {
                                                          "invisible": true,
                                                        }
                                                      }
                                                      className="MuiPopover-root"
                                                      container={<body />}
                                                      id="menu-"
                                                      onClose={[Function]}
                                                      open={false}
                                                    />
                                                  </ForwardRef(Popover)>
                                                </WithStyles(ForwardRef(Popover))>
                                              </ForwardRef(Menu)>
                                            </WithStyles(ForwardRef(Menu))>
                                          </ForwardRef(SelectInput)>
                                          <WithStyles(ForwardRef(NotchedOutline))
                                            className="MuiOutlinedInput-notchedOutline"
                                            labelWidth={0}
                                            notched={false}
                                          >
                                            <ForwardRef(NotchedOutline)
                                              className="MuiOutlinedInput-notchedOutline"
                                              classes={
                                                Object {
                                                  "legend": "PrivateNotchedOutline-legend-497",
                                                  "root": "PrivateNotchedOutline-root-496",
                                                }
                                              }
                                              labelWidth={0}
                                              notched={false}
                                            >
                                              <fieldset
                                                aria-hidden={true}
                                                className="PrivateNotchedOutline-root-496 MuiOutlinedInput-notchedOutline"
                                                style={
                                                  Object {
                                                    "paddingLeft": 8,
                                                  }
                                                }
                                              >
                                                <legend
                                                  className="PrivateNotchedOutline-legend-497"
                                                  style={
                                                    Object {
                                                      "width": 0.01,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "&#8203;",
                                                      }
                                                    }
                                                  />
                                                </legend>
                                              </fieldset>
                                            </ForwardRef(NotchedOutline)>
                                          </WithStyles(ForwardRef(NotchedOutline))>
                                        </div>
                                      </ForwardRef(InputBase)>
                                    </WithStyles(ForwardRef(InputBase))>
                                  </ForwardRef(OutlinedInput)>
                                </WithStyles(ForwardRef(OutlinedInput))>
                              </ForwardRef(Select)>
                            </WithStyles(ForwardRef(Select))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                  <WithStyles(ForwardRef(TextField))
                    className="inject-with-rootStore(AddForm)-descriptionTextField-455"
                    label="Description"
                    onChange={[Function]}
                    value=""
                    variant="outlined"
                  >
                    <ForwardRef(TextField)
                      className="inject-with-rootStore(AddForm)-descriptionTextField-455"
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      label="Description"
                      onChange={[Function]}
                      value=""
                      variant="outlined"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root inject-with-rootStore(AddForm)-descriptionTextField-455"
                        required={false}
                        variant="outlined"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root inject-with-rootStore(AddForm)-descriptionTextField-455"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          required={false}
                          variant="outlined"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root inject-with-rootStore(AddForm)-descriptionTextField-455"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      data-shrink={false}
                                    >
                                      Description
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(OutlinedInput))
                              labelWidth={0}
                              onChange={[Function]}
                              value=""
                            >
                              <ForwardRef(OutlinedInput)
                                classes={
                                  Object {
                                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiOutlinedInput-adornedStart",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "input": "MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                    "inputSelect": "MuiOutlinedInput-inputSelect",
                                    "marginDense": "MuiOutlinedInput-marginDense",
                                    "multiline": "MuiOutlinedInput-multiline",
                                    "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                    "root": "MuiOutlinedInput-root",
                                  }
                                }
                                labelWidth={0}
                                onChange={[Function]}
                                value=""
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "inputSelect": "MuiOutlinedInput-inputSelect",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": null,
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent="input"
                                  multiline={false}
                                  onChange={[Function]}
                                  renderSuffix={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <ForwardRef(InputBase)
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth",
                                        "input": "MuiInputBase-input MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                        "inputSelect": "MuiInputBase-inputSelect MuiOutlinedInput-inputSelect",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                        "root": "MuiInputBase-root MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent="input"
                                    multiline={false}
                                    onChange={[Function]}
                                    renderSuffix={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <div
                                      className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                                      onClick={[Function]}
                                    >
                                      <input
                                        aria-invalid={false}
                                        className="MuiInputBase-input MuiOutlinedInput-input"
                                        disabled={false}
                                        onAnimationStart={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        type="text"
                                        value=""
                                      />
                                      <WithStyles(ForwardRef(NotchedOutline))
                                        className="MuiOutlinedInput-notchedOutline"
                                        labelWidth={0}
                                        notched={false}
                                      >
                                        <ForwardRef(NotchedOutline)
                                          className="MuiOutlinedInput-notchedOutline"
                                          classes={
                                            Object {
                                              "legend": "PrivateNotchedOutline-legend-497",
                                              "root": "PrivateNotchedOutline-root-496",
                                            }
                                          }
                                          labelWidth={0}
                                          notched={false}
                                        >
                                          <fieldset
                                            aria-hidden={true}
                                            className="PrivateNotchedOutline-root-496 MuiOutlinedInput-notchedOutline"
                                            style={
                                              Object {
                                                "paddingLeft": 8,
                                              }
                                            }
                                          >
                                            <legend
                                              className="PrivateNotchedOutline-legend-497"
                                              style={
                                                Object {
                                                  "width": 0.01,
                                                }
                                              }
                                            >
                                              <span
                                                dangerouslySetInnerHTML={
                                                  Object {
                                                    "__html": "&#8203;",
                                                  }
                                                }
                                              />
                                            </legend>
                                          </fieldset>
                                        </ForwardRef(NotchedOutline)>
                                      </WithStyles(ForwardRef(NotchedOutline))>
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(OutlinedInput)>
                            </WithStyles(ForwardRef(OutlinedInput))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                  <WithStyles(ForwardRef(Button))
                    className="inject-with-rootStore(AddForm)-addButton-456"
                    color="primary"
                    disabled={true}
                    onClick={[Function]}
                    variant="contained"
                  >
                    <ForwardRef(Button)
                      className="inject-with-rootStore(AddForm)-addButton-456"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disabled": "Mui-disabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      color="primary"
                      disabled={true}
                      onClick={[Function]}
                      variant="contained"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root MuiButton-contained inject-with-rootStore(AddForm)-addButton-456 MuiButton-containedPrimary Mui-disabled"
                        component="button"
                        disabled={true}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root MuiButton-contained inject-with-rootStore(AddForm)-addButton-456 MuiButton-containedPrimary Mui-disabled"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root MuiButton-contained inject-with-rootStore(AddForm)-addButton-456 MuiButton-containedPrimary Mui-disabled Mui-disabled"
                            disabled={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={-1}
                            type="button"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden="true"
                                      className="MuiSvgIcon-root"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              Create
                            </span>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </div>
              </AddForm>
            </inject-with-rootStore(AddForm)>
          </WithStyles(inject-with-rootStore(AddForm))>
          <WithStyles(PokemonList)
            isLoading={true}
            pokemonList={Array []}
          >
            <PokemonList
              classes={
                Object {
                  "noPokemonFound": "PokemonList-noPokemonFound-545",
                  "pokemonCard": "PokemonList-pokemonCard-543",
                  "progress": "PokemonList-progress-544",
                  "root": "PokemonList-root-542",
                }
              }
              isLoading={true}
              pokemonList={Array []}
            >
              <WithStyles(ForwardRef(Grid))
                container={true}
                spacing={3}
              >
                <ForwardRef(Grid)
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-xs-center": "MuiGrid-justify-xs-center",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  container={true}
                  spacing={3}
                >
                  <div
                    className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-3"
                  >
                    <WithStyles(ForwardRef(CircularProgress))
                      className="PokemonList-progress-544"
                    >
                      <ForwardRef(CircularProgress)
                        className="PokemonList-progress-544"
                        classes={
                          Object {
                            "circle": "MuiCircularProgress-circle",
                            "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
                            "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
                            "circleStatic": "MuiCircularProgress-circleStatic",
                            "colorPrimary": "MuiCircularProgress-colorPrimary",
                            "colorSecondary": "MuiCircularProgress-colorSecondary",
                            "indeterminate": "MuiCircularProgress-indeterminate",
                            "root": "MuiCircularProgress-root",
                            "static": "MuiCircularProgress-static",
                            "svg": "MuiCircularProgress-svg",
                          }
                        }
                      >
                        <div
                          className="MuiCircularProgress-root PokemonList-progress-544 MuiCircularProgress-colorPrimary MuiCircularProgress-indeterminate"
                          role="progressbar"
                          style={
                            Object {
                              "height": 40,
                              "width": 40,
                            }
                          }
                        >
                          <svg
                            className="MuiCircularProgress-svg"
                            viewBox="22 22 44 44"
                          >
                            <circle
                              className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                              cx={44}
                              cy={44}
                              fill="none"
                              r={20.2}
                              strokeWidth={3.6}
                              style={Object {}}
                            />
                          </svg>
                        </div>
                      </ForwardRef(CircularProgress)>
                    </WithStyles(ForwardRef(CircularProgress))>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
            </PokemonList>
          </WithStyles(PokemonList)>
        </div>
      </MobXProvider>
    </App>
  </WithStyles(App)>
   
</MobXProvider>
`;
